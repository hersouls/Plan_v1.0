# 본문 시작
name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

# ✅ 브랜치별 단일 실행(중복 배포 방지)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # (권장) 커버리지/버전 태깅 등에 유용

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run quality checks
        run: npm run quality:check

      - name: Run tests with coverage
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # ✅ 빌드 타임 env 필요시 여기서 주입
      - name: Build application
        run: npm run build:production
        env:
          CI: true
          NODE_ENV: production
          # 예) VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          # 예) FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}

      # (선택) 산출물 업로드 - Vercel이 재빌드 할 거라면 굳이 필요 없음
      # - name: Upload build artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-files
      #     path: dist/
      #     retention-days: 7

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    if: false  # Playwright not installed, skip for now
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      # ✅ (필요시) 미리보기 서버 기동 + 대기
      # playwright.config에 webServer가 없다면 아래 두 스텝을 활성화
      # - name: Start preview server
      #   run: npx vite preview --port 4173 --strictPort --host &
      # - name: Wait for server
      #   run: npx wait-on http://localhost:4173

      - name: Run E2E tests
        run: npm run test:e2e
        # env:
        #   BASE_URL: http://localhost:4173

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # ✅ 파이프라인 차단을 원치 않으면 아래 중 택1
      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run custom security checks
        run: npm run security:check
        continue-on-error: true

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Deploy to Vercel (Preview)
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        # 👉 프리뷰는 기본 브랜치/PR에 맞춰 Vercel이 빌드/배포합니다.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Final deployment checks
        run: npm run deploy:ready

      - name: Deploy to Vercel (Production)
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Deploy Firebase (Production)
        run: npm run firebase:deploy
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
# 본문 종료
