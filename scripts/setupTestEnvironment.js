import { initializeApp } from 'firebase/app';\nimport { getFirestore, connectFirestoreEmulator, enableNetwork, disableNetwork } from 'firebase/firestore';\nimport { getAuth, connectAuthEmulator, signOut } from 'firebase/auth';\nimport { getStorage, connectStorageEmulator } from 'firebase/storage';\nimport dotenv from 'dotenv';\nimport { execSync } from 'child_process';\nimport fs from 'fs';\n\n// Load test environment variables\ndotenv.config({ path: '.env.test' });\n\n/**\n * üß™ Comprehensive Test Environment Setup for Moonwave Plan\n * Sets up Firebase emulators, test data, and authentication for Playwright testing\n */\n\nconst isTestMode = process.env.NODE_ENV === 'test';\nconst useEmulator = process.env.VITE_USE_FIREBASE_EMULATOR === 'true';\n\n// Firebase configuration for testing\nconst firebaseConfig = {\n  apiKey: process.env.VITE_FIREBASE_API_KEY,\n  authDomain: process.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.VITE_FIREBASE_APP_ID\n};\n\nconsole.log('üöÄ Setting up Moonwave Plan Test Environment...');\nconsole.log(`üìä Test Mode: ${isTestMode}`);\nconsole.log(`üî• Use Emulator: ${useEmulator}`);\nconsole.log(`üéØ Project ID: ${firebaseConfig.projectId}`);\n\nlet app, db, auth, storage;\n\ntry {\n  // Initialize Firebase\n  app = initializeApp(firebaseConfig);\n  db = getFirestore(app);\n  auth = getAuth(app);\n  storage = getStorage(app);\n\n  // Connect to emulators if in test mode\n  if (useEmulator && isTestMode) {\n    console.log('üîå Connecting to Firebase Emulators...');\n    \n    // Check if we need to start emulators\n    await ensureEmulatorsRunning();\n    \n    // Connect to emulators\n    try {\n      connectAuthEmulator(auth, process.env.VITE_FIREBASE_AUTH_EMULATOR_URL);\n      console.log('‚úÖ Connected to Auth Emulator');\n    } catch (e) {\n      console.log('‚ÑπÔ∏è Auth Emulator already connected');\n    }\n    \n    try {\n      connectFirestoreEmulator(db, 'localhost', 8080);\n      console.log('‚úÖ Connected to Firestore Emulator');\n    } catch (e) {\n      console.log('‚ÑπÔ∏è Firestore Emulator already connected');\n    }\n    \n    try {\n      connectStorageEmulator(storage, 'localhost', 9199);\n      console.log('‚úÖ Connected to Storage Emulator');\n    } catch (e) {\n      console.log('‚ÑπÔ∏è Storage Emulator already connected');\n    }\n  }\n\n  // Set up test data and permissions\n  await setupTestEnvironment();\n  \n  console.log('‚úÖ Test environment setup completed successfully!');\n  \n} catch (error) {\n  console.error('‚ùå Test environment setup failed:', error);\n  process.exit(1);\n}\n\n/**\n * Ensure Firebase emulators are running\n */\nasync function ensureEmulatorsRunning() {\n  try {\n    // Check if emulators are already running\n    const response = await fetch('http://localhost:8080');\n    if (response.ok) {\n      console.log('‚úÖ Firebase emulators already running');\n      return;\n    }\n  } catch {\n    // Emulators not running, start them\n  }\n  \n  console.log('üöÄ Starting Firebase Emulators...');\n  \n  try {\n    // Start emulators in detached mode\n    execSync('npx firebase emulators:start --only auth,firestore,storage --detach', {\n      stdio: 'pipe',\n      timeout: 60000\n    });\n    \n    // Wait for emulators to be ready\n    await waitForEmulators();\n    \n  } catch (error) {\n    console.error('Failed to start emulators:', error);\n    throw error;\n  }\n}\n\n/**\n * Wait for emulators to be ready\n */\nasync function waitForEmulators() {\n  const maxAttempts = 60;\n  const delay = 1000;\n  \n  for (let i = 0; i < maxAttempts; i++) {\n    try {\n      const [firestoreRes, authRes] = await Promise.all([\n        fetch('http://localhost:8080'),\n        fetch('http://localhost:9099')\n      ]);\n      \n      if (firestoreRes.ok && authRes.ok) {\n        console.log('‚úÖ All emulators are ready!');\n        return;\n      }\n    } catch {\n      // Continue waiting\n    }\n    \n    if (i === 0) console.log('‚è≥ Waiting for emulators to start...');\n    await new Promise(resolve => setTimeout(resolve, delay));\n  }\n  \n  throw new Error('Emulators failed to start within timeout');\n}\n\n/**\n * Set up complete test environment\n */\nasync function setupTestEnvironment() {\n  console.log('üìä Setting up test data and permissions...');\n  \n  try {\n    // 1. Clear existing data (emulator only)\n    if (useEmulator) {\n      await clearEmulatorData();\n    }\n    \n    // 2. Set up Firebase security rules for testing\n    await setupFirebaseRules();\n    \n    // 3. Create test accounts\n    await createTestAccounts();\n    \n    // 4. Set up test data\n    await setupTestData();\n    \n    // 5. Create authentication states\n    await createAuthStates();\n    \n    console.log('‚úÖ Test environment fully configured!');\n    \n  } catch (error) {\n    console.error('Test environment setup failed:', error);\n    throw error;\n  }\n}\n\n/**\n * Clear emulator data\n */\nasync function clearEmulatorData() {\n  try {\n    console.log('üßπ Clearing emulator data...');\n    \n    // Clear Firestore data\n    await fetch('http://localhost:8080/emulator/v1/projects/plan-e7bc6/databases/(default)/documents', {\n      method: 'DELETE'\n    });\n    \n    // Clear Auth data\n    await fetch('http://localhost:9099/emulator/v1/projects/plan-e7bc6/accounts', {\n      method: 'DELETE'\n    });\n    \n    console.log('‚úÖ Emulator data cleared');\n  } catch (error) {\n    console.warn('Failed to clear emulator data:', error);\n  }\n}\n\n/**\n * Setup Firebase security rules for testing\n */\nasync function setupFirebaseRules() {\n  try {\n    console.log('üîí Setting up Firebase security rules for testing...');\n    \n    if (useEmulator) {\n      // In emulator mode, deploy test-friendly rules\n      const testRules = `\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Allow all operations for testing\n    match /{document=**} {\n      allow read, write: if true;\n    }\n  }\n}\n`;\n      \n      // Write test rules to temporary file\n      fs.writeFileSync('.firestore.rules.test', testRules);\n      \n      // Apply test rules to emulator\n      try {\n        execSync('npx firebase deploy --only firestore:rules --project plan-e7bc6', {\n          stdio: 'pipe',\n          timeout: 30000\n        });\n        console.log('‚úÖ Test security rules applied');\n      } catch (ruleError) {\n        console.warn('Failed to apply test rules, using default:', ruleError.message);\n      }\n      \n      // Clean up temporary file\n      if (fs.existsSync('.firestore.rules.test')) {\n        fs.unlinkSync('.firestore.rules.test');\n      }\n    }\n  } catch (error) {\n    console.warn('Security rules setup failed:', error);\n  }\n}\n\n/**\n * Create test user accounts\n */\nasync function createTestAccounts() {\n  console.log('üë• Creating test user accounts...');\n  \n  const testUsers = [\n    {\n      email: process.env.TEST_USER_EMAIL || 'dad@moonwave.test',\n      password: process.env.TEST_USER_PASSWORD || 'test123456',\n      displayName: 'ÍπÄÏïÑÎπ†',\n      role: 'parent'\n    },\n    {\n      email: process.env.TEST_USER_2_EMAIL || 'mom@moonwave.test',\n      password: process.env.TEST_USER_2_PASSWORD || 'test123456',\n      displayName: 'Î∞ïÏóÑÎßà',\n      role: 'parent'\n    },\n    {\n      email: process.env.TEST_USER_3_EMAIL || 'suhyun@moonwave.test',\n      password: process.env.TEST_USER_3_PASSWORD || 'test123456',\n      displayName: 'ÍπÄÏàòÌòÑ',\n      role: 'child'\n    },\n    {\n      email: process.env.TEST_USER_4_EMAIL || 'dohyun@moonwave.test',\n      password: process.env.TEST_USER_4_PASSWORD || 'test123456',\n      displayName: 'ÍπÄÎèÑÌòÑ',\n      role: 'child'\n    }\n  ];\n  \n  // Create test accounts via REST API (works with emulator)\n  for (const user of testUsers) {\n    try {\n      const createResponse = await fetch(`http://localhost:9099/identitytoolkit.googleapis.com/v1/accounts:signUp?key=test-key`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: user.email,\n          password: user.password,\n          displayName: user.displayName,\n          returnSecureToken: true\n        })\n      });\n      \n      if (createResponse.ok) {\n        const userData = await createResponse.json();\n        console.log(`‚úÖ Created test user: ${user.email}`);\n        \n        // Store user profile in Firestore\n        await fetch(`http://localhost:8080/v1/projects/plan-e7bc6/databases/(default)/documents/users/${userData.localId}`, {\n          method: 'PATCH',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            fields: {\n              email: { stringValue: user.email },\n              displayName: { stringValue: user.displayName },\n              role: { stringValue: user.role },\n              familyGroupId: { stringValue: process.env.TEST_FAMILY_GROUP_ID || 'family-kim-2024' },\n              createdAt: { timestampValue: new Date().toISOString() }\n            }\n          })\n        });\n        \n      } else {\n        const errorData = await createResponse.json();\n        if (errorData.error?.message?.includes('EMAIL_EXISTS')) {\n          console.log(`‚ÑπÔ∏è Test user already exists: ${user.email}`);\n        } else {\n          console.warn(`Failed to create user ${user.email}:`, errorData);\n        }\n      }\n    } catch (error) {\n      console.warn(`Error creating user ${user.email}:`, error);\n    }\n  }\n}\n\n/**\n * Set up test data\n */\nasync function setupTestData() {\n  console.log('üìù Setting up test tasks and family data...');\n  \n  try {\n    // Run the existing test data setup script\n    execSync('node scripts/setupTestData.js', {\n      stdio: 'inherit',\n      timeout: 60000,\n      env: { ...process.env, NODE_ENV: 'test' }\n    });\n    \n    console.log('‚úÖ Test data setup completed');\n  } catch (error) {\n    console.warn('Test data setup failed, using minimal data:', error);\n  }\n}\n\n/**\n * Create authentication states for different test scenarios\n */\nasync function createAuthStates() {\n  console.log('üîë Creating authentication states for testing...');\n  \n  const authStates = {\n    authenticated: {\n      email: process.env.TEST_USER_EMAIL || 'dad@moonwave.test',\n      password: process.env.TEST_USER_PASSWORD || 'test123456'\n    },\n    parentUser: {\n      email: process.env.TEST_USER_2_EMAIL || 'mom@moonwave.test',\n      password: process.env.TEST_USER_2_PASSWORD || 'test123456'\n    },\n    childUser: {\n      email: process.env.TEST_USER_3_EMAIL || 'suhyun@moonwave.test',\n      password: process.env.TEST_USER_3_PASSWORD || 'test123456'\n    }\n  };\n  \n  // Save auth state configurations\n  fs.writeFileSync('tests/auth-states.json', JSON.stringify(authStates, null, 2));\n  console.log('‚úÖ Authentication states saved');\n}\n\nconsole.log('üéâ Moonwave Plan test environment is ready!');\nconsole.log('\\nüìã Next steps:');\nconsole.log('  1. Run: npm run test:e2e');\nconsole.log('  2. Or run specific tests: npx playwright test --headed');\nconsole.log('  3. View test results: npm run test:e2e:report');\nconsole.log('\\nüîó Test URLs:');\nconsole.log('  ‚Ä¢ Application: http://localhost:3002');\nconsole.log('  ‚Ä¢ Firestore Emulator: http://localhost:8080');\nconsole.log('  ‚Ä¢ Auth Emulator: http://localhost:9099');\nconsole.log('\\nüë• Test Accounts:');\nconsole.log('  ‚Ä¢ dad@moonwave.test / test123456 (Parent)');\nconsole.log('  ‚Ä¢ mom@moonwave.test / test123456 (Parent)');\nconsole.log('  ‚Ä¢ suhyun@moonwave.test / test123456 (Child)');\nconsole.log('  ‚Ä¢ dohyun@moonwave.test / test123456 (Child)');